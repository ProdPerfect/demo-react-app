{"version":3,"sources":["logo.svg","p2-color-logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","p2Logo","alt","logo","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","e","n","r","o","Keen","t","d","getElementsByTagName","i","c","onload","onreadystatechange","readyState","test","async","libraryUrl","parentNode","insertBefore","requestType","ProdPerfectKeen","extendEvents","visitor","user_id","initAutoTracking","ignoreDisabledFormFields","recordClicks","recordFormSubmits","recordInputChanges","recordPageViews","recordPageUnloads","recordScrollState","host","projectId","writeKey"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0QC+BzBC,0LAxBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAQF,UAAU,UAAUG,IAAI,uBAE5CN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKG,IAAMJ,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBAZQC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gBC/GnB,SAAUC,GAAG,IAAIC,EAAEC,EAAE,kBAAkBC,IAAIlB,OAAOmB,MAAMnB,OAAOmB,KAAKnB,OAAOiB,GAAGjB,OAAOiB,IAAI,CAACN,MAAM,SAASS,GAAG,IAAIhC,EAAEiC,EAAEd,SAASe,qBAAqB,QAAQ,GAAGC,EAAEhB,SAASlB,cAAc,UAAUmC,EAAExB,OAAOuB,EAAEE,OAAOF,EAAEG,mBAAmB,WAAW,KAAKH,EAAEI,aAAa,WAAWC,KAAKL,EAAEI,aAAavC,GAAG,CAAC,GAAGmC,EAAEE,OAAOF,EAAEG,mBAAmB,KAAKtC,EAAE,EAAE4B,EAAEQ,EAAEL,KAAKD,EAAEM,EAAEL,KAAKD,OAAO,WAAWM,EAAEL,KAAK,MAAMJ,GAAGS,EAAEL,UAAK,EAAOK,EAAEP,GAAGD,EAAEQ,EAAEP,GAAGN,MAAMS,KAAKG,EAAEM,MAAM,EAAEN,EAAEhC,IAAIwB,EAAEe,WAAWT,EAAEU,WAAWC,aAAaT,EAAEF,KAAKrB,OAAOiB,GAAGN,MAAM,WAAWI,EAAEkB,YAAY,SAAS,IAAIjB,EAAE,IAAIhB,OAAOkC,gBAAgBnB,GAAGC,EAAEmB,aAAa,CAACC,QAAQ,CAACC,QAAQ,QAAQrB,EAAEsB,iBAAiB,CAACC,0BAAyB,EAAGC,cAAa,EAAGC,mBAAkB,EAAGC,oBAAmB,EAAGC,iBAAgB,EAAGC,mBAAkB,EAAGC,mBAAkB,MAA9wB,CAP0B,CACtBC,KAAM,yCACNhB,WAAY,0EACZiB,UAAW,2BACXC,SAAU","file":"static/js/main.c3248524.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/p2-color-logo.8a478909.png\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport p2Logo from './p2-color-logo.png'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header p2-header\">\n          <img src={p2Logo} className=\"p2-logo\" alt=\"Prod Perfect logo\" />\n        </header>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst prodPerfectConfig = {\n    host: 'pevnertest.datapipe.prodperfect.com/v1',\n    libraryUrl: 'https://pevnertest.trackinglibrary.prodperfect.com/keen-tracking.min.js',\n    projectId: '3tq1WVDi5zBF08w3EqFCLK11',\n    writeKey: 'DQZGHGI5JRHCIIL249LR954YXNDL6IWJOYIRBX66TXY4FXFWTMOR4LCJ77WKESG59WTTADQB7BKGCUVPS0U1A0X13NI6EWQEKUY8LOPZDG5HTI8DXUB933S2TWOL7QJ5EI0P2PQUNED67TL1XOB3EBKM4QHLTH66GESTSWGXQMAZRHLS8TXMGIS260NELCIR'\n};\n\n(function(e){var n,r=\"ProdPerfectKeen\",o=!!window.Keen&&window.Keen;window[r]=window[r]||{ready:function(t){var a,d=document.getElementsByTagName(\"head\")[0],i=document.createElement(\"script\"),c=window;i.onload=i.onreadystatechange=function(){if(!(i.readyState&&!/^c|loade/.test(i.readyState)||a)){if(i.onload=i.onreadystatechange=null,a=1,n=c.Keen,o)c.Keen=o;else try{delete c.Keen}catch(e){c.Keen=void 0}c[r]=n,c[r].ready(t)}},i.async=1,i.src=e.libraryUrl,d.parentNode.insertBefore(i,d)}},window[r].ready(function(){e.requestType=\"beacon\";var n=new window.ProdPerfectKeen(e);n.extendEvents({visitor:{user_id:null}});n.initAutoTracking({ignoreDisabledFormFields:!1,recordClicks:!0,recordFormSubmits:!0,recordInputChanges:!0,recordPageViews:!0,recordPageUnloads:!0,recordScrollState:!0})})})(prodPerfectConfig); // eslint-disable-line\n\n"],"sourceRoot":""}